// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/back/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sqlc "pdv/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateProduto mocks base method
func (m *MockStore) CreateProduto(arg0 context.Context, arg1 sqlc.CreateProdutoParams) (sqlc.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduto", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduto indicates an expected call of CreateProduto
func (mr *MockStoreMockRecorder) CreateProduto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduto", reflect.TypeOf((*MockStore)(nil).CreateProduto), arg0, arg1)
}

// DeleteProduto mocks base method
func (m *MockStore) DeleteProduto(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduto", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduto indicates an expected call of DeleteProduto
func (mr *MockStoreMockRecorder) DeleteProduto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduto", reflect.TypeOf((*MockStore)(nil).DeleteProduto), arg0, arg1)
}

// GetProduto mocks base method
func (m *MockStore) GetProduto(arg0 context.Context, arg1 int64) (sqlc.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduto", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduto indicates an expected call of GetProduto
func (mr *MockStoreMockRecorder) GetProduto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduto", reflect.TypeOf((*MockStore)(nil).GetProduto), arg0, arg1)
}

// ListProdutos mocks base method
func (m *MockStore) ListProdutos(arg0 context.Context, arg1 sqlc.ListProdutosParams) ([]sqlc.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProdutos", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProdutos indicates an expected call of ListProdutos
func (mr *MockStoreMockRecorder) ListProdutos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProdutos", reflect.TypeOf((*MockStore)(nil).ListProdutos), arg0, arg1)
}

// UpdateProduto mocks base method
func (m *MockStore) UpdateProduto(arg0 context.Context, arg1 sqlc.UpdateProdutoParams) (sqlc.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduto", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduto indicates an expected call of UpdateProduto
func (mr *MockStoreMockRecorder) UpdateProduto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduto", reflect.TypeOf((*MockStore)(nil).UpdateProduto), arg0, arg1)
}
